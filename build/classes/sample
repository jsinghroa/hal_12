if(null !=row){
					if((null != row.getCell(0) && row.getCell(0).getCellType() != Cell.CELL_TYPE_BLANK) || (null != row.getCell(1) && row.getCell(1).getCellType() != Cell.CELL_TYPE_BLANK) 
							|| (null != row.getCell(2) && row.getCell(2).getCellType() != Cell.CELL_TYPE_BLANK) ||(null != row.getCell(3) && row.getCell(3).getCellType() != Cell.CELL_TYPE_BLANK)
							|| (null != row.getCell(4) && row.getCell(4).getCellType() != Cell.CELL_TYPE_BLANK) ||(null != row.getCell(5) && row.getCell(5).getCellType() != Cell.CELL_TYPE_BLANK)
							||(null != row.getCell(6) && row.getCell(6).getCellType() != Cell.CELL_TYPE_BLANK) ||(null != row.getCell(7) && row.getCell(7).getCellType() != Cell.CELL_TYPE_BLANK)
							||(null != row.getCell(8) && row.getCell(8).getCellType() != Cell.CELL_TYPE_BLANK) ||(null != row.getCell(9) && row.getCell(9).getCellType() != Cell.CELL_TYPE_BLANK)
							||(null != row.getCell(10) && row.getCell(10).getCellType() != Cell.CELL_TYPE_BLANK) ||(null != row.getCell(11) && row.getCell(11).getCellType() != Cell.CELL_TYPE_BLANK)
							||(null != row.getCell(12) && row.getCell(12).getCellType() != Cell.CELL_TYPE_BLANK) ||(null != row.getCell(13) && row.getCell(13).getCellType() != Cell.CELL_TYPE_BLANK)
							||(null != row.getCell(14) && row.getCell(14).getCellType() != Cell.CELL_TYPE_BLANK) ||(null != row.getCell(15) && row.getCell(15).getCellType() != Cell.CELL_TYPE_BLANK)){

						BulkUploadForm blkupdfrm=new BulkUploadForm();

						blkupdfrm.setFileName(excelfile.getOriginalFilename());
						blkupdfrm.setMaximoDetailsForm(bulkUploadForm.getMaximoDetailsForm());
						blkupdfrm.setTopic(bulkUploadForm.getTopic());

						List<String> errorList = bulkUploadValidator.validateRow2003(row,worksheet.getRow(0));
						
						logger.info("ErrorList size ::"+errorList.size());

						if(errorList.size()==0){
							blkupdfrm.setStatus(Constants.INITIAL_STATUS);
						}
						else{
							String errorString = errorList.toString();
							blkupdfrm.setStatus(errorString.substring(1, errorString.length()-1));
						}

						if(!(row.getCell(0)==null)){
							blkupdfrm.setOption(checkCellType2003(row.getCell(0)));
						}
						else{
							blkupdfrm.setOption("");
						}

						if(!(row.getCell(1)==null)){
							blkupdfrm.setSubOption(checkCellType2003(row.getCell(1)));
						}
						else{
							blkupdfrm.setSubOption("");
						}
						if(!(row.getCell(2)==null)){
							blkupdfrm.setCategory(checkCellType2003(row.getCell(2)));
						}
						else{
							blkupdfrm.setCategory("");
						}
						if(!(row.getCell(3)==null)){
							blkupdfrm.setSubCategory(checkCellType2003(row.getCell(3)));
						}
						else{
							blkupdfrm.setSubCategory("");
						}

						if(!(row.getCell(4)==null))
						{

							if(row.getCell(4).getCellType() != HSSFCell.CELL_TYPE_NUMERIC || checkCellType2003(row.getCell(4)).isEmpty()){
								blkupdfrm.setDv1(0);
							}
							else{
								blkupdfrm.setDv1((int)row.getCell(4).getNumericCellValue());
							}
						}
						else
						{
							blkupdfrm.setDv1(0);	
						}
						if(!(row.getCell(5)==null))
						{
							if(row.getCell(5).getCellType() != HSSFCell.CELL_TYPE_NUMERIC || checkCellType2003(row.getCell(5)).isEmpty()){
								blkupdfrm.setId1(0);
							}
							else{
								blkupdfrm.setId1((int)row.getCell(5).getNumericCellValue());
							}
						}
						else
						{
							blkupdfrm.setId1(0);	
						}
						if(!(row.getCell(6)==null))
						{
							if(row.getCell(6).getCellType() != HSSFCell.CELL_TYPE_NUMERIC || checkCellType2003(row.getCell(6)).isEmpty()){
								blkupdfrm.setDv2(0);
							}
							else{
								blkupdfrm.setDv2((int)row.getCell(6).getNumericCellValue());
							}
						}
						else
						{
							blkupdfrm.setDv2(0);	
						}
						if(!(row.getCell(7)==null))
						{
							if(row.getCell(7).getCellType() != HSSFCell.CELL_TYPE_NUMERIC || checkCellType2003(row.getCell(7)).isEmpty()){
								blkupdfrm.setId2(0);
							}
							else{
								blkupdfrm.setId2((int)row.getCell(7).getNumericCellValue());
							}
						}
						else
						{
							blkupdfrm.setId2(0);	
						}
						if(!(row.getCell(8)==null))
						{
							if(row.getCell(8).getCellType() != HSSFCell.CELL_TYPE_NUMERIC || checkCellType2003(row.getCell(8)).isEmpty()){
								blkupdfrm.setDv3(0);
							}
							else{
								blkupdfrm.setDv3((int)row.getCell(8).getNumericCellValue());
							}
						}
						else
						{
							blkupdfrm.setDv3(0);	
						}
						if(!(row.getCell(9)==null))
						{
							if(row.getCell(9).getCellType() != HSSFCell.CELL_TYPE_NUMERIC || checkCellType2003(row.getCell(9)).isEmpty()){
								blkupdfrm.setId3(0);
							}
							else{
								blkupdfrm.setId3((int)row.getCell(9).getNumericCellValue());
							}
						}
						else
						{
							blkupdfrm.setId3(0);	
						}
						if(!(row.getCell(10)==null)){
							blkupdfrm.setQuestionDesc(checkCellType2003(row.getCell(10)));
						}
						else{
							blkupdfrm.setQuestionDesc("");
						}

						if(!(row.getCell(11)==null))
						{
							blkupdfrm.setOptOne(checkCellType2003(row.getCell(11)));
						}
						else
						{
							blkupdfrm.setOptOne("");	
						}
						if(!(row.getCell(12)==null))
						{
							blkupdfrm.setOptTwo(checkCellType2003(row.getCell(12)));
						}
						else
						{
							blkupdfrm.setOptTwo("");	
						}
						if(!(row.getCell(13)==null))
						{
							blkupdfrm.setOptThree(checkCellType2003(row.getCell(13)));
						}
						else
						{
							blkupdfrm.setOptThree("");	
						}
						if(!(row.getCell(14)==null))
						{
							blkupdfrm.setOptFour(checkCellType2003(row.getCell(14)));
						}
						else
						{
							blkupdfrm.setOptFour("");	
						}

						if(!(row.getCell(15)==null)){
							blkupdfrm.setAnswer(checkCellType2003(row.getCell(15)));
						}
						else{
							blkupdfrm.setAnswer("");
						}















/**
 * MeterDetailsValidator is a validation class to validate user input on 'Meter Details' screen
 */

/**
 * @author Resham Das
 *
 */

package com.wipro.iaf.emms.validator;

import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Component;

import com.wipro.iaf.emms.constants.*;

@Component
@Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)
public class MeterDetailsValidator {

	public String meterDetailsErrorMsg;
	CommonValidator commonValidator = new CommonValidator();

	String formatValidation;

	public String meterDetailsValidate(String initialCount, String initialDate,
			String currentCount,String ExAssetCurrentCount,String exInstalledPn,String exInstalledSn,String installedPn,String installedSn,String lastCompiledValue,String lastCompiledDate,String uom){
		System.out.println(initialCount+":"+currentCount+":"+initialDate);
		System.out.println(ExAssetCurrentCount+":"+exInstalledPn+":"+exInstalledSn+":"+installedPn+":"+installedSn+":"+lastCompiledValue+":"+lastCompiledDate+":"+uom);
		meterDetailsErrorMsg = Constants.NOERROR;
		int flag=0;
		
		
		if(uom.equalsIgnoreCase("hh:mm:ss"))
		{
			if(commonValidator.uomValidate(initialCount)&&commonValidator.uomValidate(currentCount))
			{
				System.out.println("UOM IS CORRECT");

				// 1.Initial Date should not be blank if Initial Count contains value.
				if (!initialCount.isEmpty() && initialDate.isEmpty()) {
					if (meterDetailsErrorMsg.length() > 0) {
						meterDetailsErrorMsg += "\n"
								+ Constants.INITIALDATEMANDATORYERROR;
					} else
						meterDetailsErrorMsg += Constants.INITIALDATEMANDATORYERROR;
				}else
				{  if(!initialDate.isEmpty())
					formatValidation = commonValidator.timeStampValidate(initialDate);
					if (!formatValidation.isEmpty()) {
						if (meterDetailsErrorMsg.length() > 0) {
							meterDetailsErrorMsg += "\n" + formatValidation;
						} else
							meterDetailsErrorMsg += formatValidation;
					}
				}
				
				//time stamp format validate
				

				
				// 2.Current Count must be equal or greater than the Initial Count.
				// Validation logic for UOM data type pending
				if ( !currentCount.isEmpty()&&currentCount.compareTo(initialCount) < 0) {
					if (meterDetailsErrorMsg.length() > 0) {
						meterDetailsErrorMsg += "\n"
								+ Constants.INITIALCOUNTGREATERTOCURRENTCOUNTERROR;
					} else
						meterDetailsErrorMsg += Constants.INITIALCOUNTGREATERTOCURRENTCOUNTERROR;
				}

				//3.In case of existing assets that have been re-installed, Current Count must be greater than the existing count* of the asset.
				
				if(installedPn.equals(exInstalledPn)&&installedSn.equals(exInstalledSn)){
				if(!ExAssetCurrentCount.isEmpty())
				{
					if(currentCount.compareTo(ExAssetCurrentCount)<0)
					{
						if (meterDetailsErrorMsg.length() > 0) {
							meterDetailsErrorMsg += "\n"
									+ Constants.EXISTINGCURRENTCOUNTERROR;
						} else
							meterDetailsErrorMsg += Constants.EXISTINGCURRENTCOUNTERROR;
						
					}
				}
				
				}
				
				
				//4.Current Count should be mandatory if Initial Value and Initial Date is having value.
				if(!initialCount.isEmpty() && !initialDate.isEmpty()){
			
					if (currentCount.isEmpty()) {
					if (meterDetailsErrorMsg.length() > 0) {
						meterDetailsErrorMsg += "\n"
								+ Constants.CURRENTCOUNTMANDATORYERROR;
					} else
						meterDetailsErrorMsg += Constants.CURRENTCOUNTMANDATORYERROR;
					}
				}
				
				
				//5.If Last Complied Date and Last Complied Value are filled up against the MPM for a meter,
				//then the corresponding meter should have Installed Count, Installed Date and Current Count in the Meter Details tab
				//for the respective Installed P/N-Installed S/N combination.
				
				if(null!=lastCompiledDate&&null!=lastCompiledValue)
				{
					System.out.println("bahvjabsdjbajsd");
				if(lastCompiledDate.length()>0&&lastCompiledValue.length()>0)
				{
					if(initialCount.isEmpty()||currentCount.isEmpty()||initialDate.isEmpty())
					{
						if (meterDetailsErrorMsg.length() > 0) {
							meterDetailsErrorMsg += "\n"
									+ Constants.PMERROR;
						} else
							meterDetailsErrorMsg += Constants.PMERROR;
					}
				}
				
				}
				
				formatValidation = commonValidator.meterValidate(currentCount);
				if (!formatValidation.isEmpty()) {
					if (meterDetailsErrorMsg.length() > 0) {
						meterDetailsErrorMsg += "\n" + formatValidation;
					} else
						meterDetailsErrorMsg += formatValidation;
				}
				
				formatValidation = commonValidator.meterValidate(initialCount);
				if (!formatValidation.isEmpty()) {
					if (meterDetailsErrorMsg.length() > 0) {
						meterDetailsErrorMsg += "\n" + formatValidation;
					} else
						meterDetailsErrorMsg += formatValidation;
				}
			}
			else
			{
				
				if (meterDetailsErrorMsg.length() > 0) {
					meterDetailsErrorMsg += "\n"
							+ Constants.UOMERROR;
				} else
					meterDetailsErrorMsg += Constants.UOMERROR;
				
				
			}
		}
		else
		{
		
		
		
		
		if(commonValidator.decimalValidate(initialCount)&&commonValidator.decimalValidate(currentCount)){
			
		
		
		// 1.Initial Date should not be blank if Initial Count contains value.
		if (!initialCount.isEmpty() && initialDate.isEmpty()) {
			if (meterDetailsErrorMsg.length() > 0) {
				meterDetailsErrorMsg += "\n"
						+ Constants.INITIALDATEMANDATORYERROR;
			} else
				meterDetailsErrorMsg += Constants.INITIALDATEMANDATORYERROR;
		}else
		{  if(!initialDate.isEmpty())
			formatValidation = commonValidator.timeStampValidate(initialDate);
			if (!formatValidation.isEmpty()) {
				if (meterDetailsErrorMsg.length() > 0) {
					meterDetailsErrorMsg += "\n" + formatValidation;
				} else
					meterDetailsErrorMsg += formatValidation;
			}
		}
		
		//time stamp format validate
		

		
		// 2.Current Count must be equal or greater than the Initial Count.
		// Validation logic for UOM data type pending
		if ( !currentCount.isEmpty()&&currentCount.compareTo(initialCount) < 0) {
			if (meterDetailsErrorMsg.length() > 0) {
				meterDetailsErrorMsg += "\n"
						+ Constants.INITIALCOUNTGREATERTOCURRENTCOUNTERROR;
			} else
				meterDetailsErrorMsg += Constants.INITIALCOUNTGREATERTOCURRENTCOUNTERROR;
		}

		//3.In case of existing assets that have been re-installed, Current Count must be greater than the existing count* of the asset.
		
		if(installedPn.equals(exInstalledPn)&&installedSn.equals(exInstalledSn)){
		if(!ExAssetCurrentCount.isEmpty())
		{
			if(currentCount.compareTo(ExAssetCurrentCount)<0)
			{
				if (meterDetailsErrorMsg.length() > 0) {
					meterDetailsErrorMsg += "\n"
							+ Constants.EXISTINGCURRENTCOUNTERROR;
				} else
					meterDetailsErrorMsg += Constants.EXISTINGCURRENTCOUNTERROR;
				
			}
		}
		
		}
		
		
		//4.Current Count should be mandatory if Initial Value and Initial Date is having value.
		if(!initialCount.isEmpty() && !initialDate.isEmpty()){
	
			if (currentCount.isEmpty()) {
			if (meterDetailsErrorMsg.length() > 0) {
				meterDetailsErrorMsg += "\n"
						+ Constants.CURRENTCOUNTMANDATORYERROR;
			} else
				meterDetailsErrorMsg += Constants.CURRENTCOUNTMANDATORYERROR;
			}
		}
		
		
		//5.If Last Complied Date and Last Complied Value are filled up against the MPM for a meter,
		//then the corresponding meter should have Installed Count, Installed Date and Current Count in the Meter Details tab
		//for the respective Installed P/N-Installed S/N combination.
		
		if(null!=lastCompiledDate&&null!=lastCompiledValue)
		{
			System.out.println("bahvjabsdjbajsd");
		if(lastCompiledDate.length()>0&&lastCompiledValue.length()>0)
		{
			if(initialCount.isEmpty()||currentCount.isEmpty()||initialDate.isEmpty())
			{
				if (meterDetailsErrorMsg.length() > 0) {
					meterDetailsErrorMsg += "\n"
							+ Constants.PMERROR;
				} else
					meterDetailsErrorMsg += Constants.PMERROR;
			}
		}
		
		}
		
		formatValidation = commonValidator.meterValidate(currentCount);
		if (!formatValidation.isEmpty()) {
			if (meterDetailsErrorMsg.length() > 0) {
				meterDetailsErrorMsg += "\n" + formatValidation;
			} else
				meterDetailsErrorMsg += formatValidation;
		}
		
		formatValidation = commonValidator.meterValidate(initialCount);
		if (!formatValidation.isEmpty()) {
			if (meterDetailsErrorMsg.length() > 0) {
				meterDetailsErrorMsg += "\n" + formatValidation;
			} else
				meterDetailsErrorMsg += formatValidation;
		}
		}
		else
		{
			//no decimal
			if (meterDetailsErrorMsg.length() > 0) {
				meterDetailsErrorMsg += "\n" + Constants.DECIMAL;
			} else
				meterDetailsErrorMsg +=  Constants.DECIMAL;
		}
	}
	
		
		
		return meterDetailsErrorMsg;

	}

	
	public String getDecimalValue(String value)
	{
		//value->hh mm ss
		int h=Integer.parseInt(value.substring(0,2));
		int m=Integer.parseInt(value.substring(3,5));
		int s=Integer.parseInt(value.substring(6,8));
		Long cal=(long) (h*3600+m*60+s);
		return String.valueOf(cal);
		
		
	}


	public  String getUomValue(String value)
	{
		String a[]=value.split(".0");
		
		Long l=Long.parseLong(a[0]);
		
		System.out.println(l);
		
		int s=(int) (l%60);
		int h=(int) (l/60);
		int m=h%60;
			h=h/60;	
				
		System.out.println(h+":"+m+":"+s);
		String uom=h+":"+m+":"+s;
		
		
		return uom;
	}
	
}
