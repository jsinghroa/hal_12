System.out.println("METER->validate");
				DateConvertor convertor = new DateConvertor();
				int warning = 0;
				int flag = 0;
				int count = 0;
				int date = 0;
				String status = Constants.NOTVALIDATED;
				String time = new Time(System.currentTimeMillis()).toString();
				String inductionDate = "";
				String signalOutDate = "";
				if (0 < emmsDataForm.getSignalOutDate().length()
						&& 0 < emmsDataForm.getInductionDate().length()) {
					inductionDate = emmsDataForm.getInductionDate() + " "
							+ time;
					signalOutDate = emmsDataForm.getSignalOutDate() + " "
							+ time;
					emmsDataForm.setInductionDate(convertor
							.getDate(inductionDate));
					emmsDataForm.setSignalOutDate(convertor
							.getDate(signalOutDate));
				} else {
					date = 1;
					emmsDataForm.setInductionDate("");
					emmsDataForm.setSignalOutDate("");
					// assetConfigForm.setErrorDesc(Constants.NOTNULL);
				}

				emmsDataForm.setAssetMeterStatus(this.emmsDataForm
						.getAssetMeterStatus());
				Map<String, String> fetchPmValues = new HashMap<String, String>();
				List<MeterDetailsForm> meterDetailsFormList = emmsDataForm
						.getMeterFormList();

				if (null != meterDetailsFormList
						&& meterDetailsFormList.size() > 0) {

					int i = 0;
					System.out.println("Iterating through List");
					for (MeterDetailsForm meterForm : meterDetailsFormList) {

						meterForm.setErrorDescription("");
						meterForm.setRecordRowId(meterFormList.get(i)
								.getRecordRowId());
						meterForm.setExAstCurrentCount(meterFormList.get(i)
								.getExAstCurrentCount());
						meterForm.setExistingInstalledPn(meterFormList.get(i)
								.getExistingInstalledPn());
						meterForm.setExistingInstalledSN(meterFormList.get(i)
								.getExistingInstalledSN());
						
						System.out.println("meterRow:" + meterForm.toString());
						System.out.println("exassercurrentcount="
								+ meterForm.getExAstCurrentCount());
						fetchPmValues = halService.fetchPmValues(
								meterForm.getInstalledPN(),
								meterForm.getInstalledSN(),
								meterForm.getInstalledPartDescription());
						System.out.println("fetchPmValues="
								+ fetchPmValues.toString());
						
						/*
						 * When validated without entering data in any row
						 */
						if (meterForm.getCurrentCount().length() <= 0
								&& meterForm.getInstallationCount().length() <= 0
								&& meterForm.getInstallationDate().length() <= 0) {
							
							System.out
									.println("METER->THERE IS NO DATA IN A CURRENT ROW");
							meterForm.setError(Constants.WARNING);
							emmsDataForm
									.setAssetMeterStatus(Constants.VALIDATIONCOMPLETEDWITHERRORS);
							warning = 1;

							if (emmsDataForm.getSignalOutDate().length() > 0
									&& emmsDataForm.getInductionDate().length() > 0) {
								System.out
										.println("METER-> UPDATE HEADER ONLY");
								halService.updateHeader(emmsDataForm);
							} else {
								meterForm
										.setErrorDescription(Constants.NOTNULL);
							}

						} else {
							/*
							 * if there is any data in any row
							 */
							System.out
							.println("METER->THERE IS DATA IN A CURRENT ROW");
							String installationDate = "";
							i++;
							if (!meterForm.getInstallationDate().isEmpty()) {
								installationDate = meterForm
										.getInstallationDate() + " " + time;
							}

							meterForm.setInstallationDate(installationDate);
							
							System.out
							.println("METER->VALIDATION STARTS");
							String validate = meterValidator
									.meterDetailsValidate(meterForm
											.getInstallationCount(), meterForm
											.getInstallationDate(), meterForm
											.getCurrentCount(), meterForm
											.getExAstCurrentCount(), meterForm
											.getExistingInstalledPn(),
											meterForm.getExistingInstalledSN(),
											meterForm.getInstalledPN(),
											meterForm.getInstalledSN(),
											fetchPmValues
													.get("lastCompiledValue"),
											fetchPmValues
													.get("lastCompiledDate"),
											meterForm.getUom()

									);

							/*
							 * Checking after validations
							 */
							System.out.println("METER->Validate=" + validate);
							if (validate == "") {
								
								System.out.println("METER->INSIDE VALIDATED:DATA IS CORRECT");
								status = Constants.VALIDATED;
								meterForm.setError(status);
								} else {
									System.out
										.println("METER->INSIDE NOT VALIDATED:SOME DATA IS INCORRECT");
								flag = 1;
								status = Constants.NOTVALIDATED;
								meterForm.setErrorDescription(validate);
								meterForm.setError(status);
							}
							// SETTING CURRENT SCREEN STATUS
							System.out.println(meterForm.getCurrentCount()
									+ ":" + meterForm.getInstallationCount());
							if (flag == 1) {
								System.out.println("METER->Flag=1;Errors");
								emmsDataForm
										.setAssetMeterStatus(Constants.VALIDATIONCOMPLETEDWITHERRORS);
								flag = 0;
								count = count + 1;

							} else {

								if (count <= 0 && warning <= 0) {
									System.out.println("METER->NOERROR");
									emmsDataForm
											.setAssetMeterStatus(Constants.VALIDATIONCOMPLETED);
								}

							}

							meterForm.setInstallationDate(convertor
									.getDateTime(meterForm
											.getInstallationDate()));

							System.out.println("UPDATE STARTS");

							if (emmsDataForm.getSignalOutDate().length() > 0
									&& emmsDataForm.getInductionDate().length() > 0) {
								System.out.println("DATE HAS VALUE");
								if (!validate.contains(Constants.DECIMAL)
										&& !validate
												.contains(Constants.UOMERROR)) {
									System.out.println("NO DECIMAL AND UOM ERROR IS THERE SO WE CAN UPDATE");
								if(meterForm.getUom().equalsIgnoreCase("hh:mm:ss"))
									{
									meterForm.setCurrentCount(meterValidator
											.getDecimalValue(meterForm
													.getCurrentCount()));
									meterForm
											.setInstallationCount(meterValidator.getDecimalValue(meterForm
													.getInstallationCount()));
									}
									halService.update(emmsDataForm, meterForm);
									meterForm.setCurrentCount(meterValidator
											.getUomValue(meterForm
													.getCurrentCount()));
									meterForm
											.setInstallationCount(meterValidator.getUomValue(meterForm
													.getInstallationCount()));

								} else {

									if (validate.contains(Constants.DECIMAL)) {
										meterForm
												.setErrorDescription(Constants.DECIMAL);
									} else
										meterForm
												.setErrorDescription(Constants.UOMERROR);

								}
							} else {
								meterForm
										.setErrorDescription(Constants.NOTNULL);
							}
							meterForm.setInstallationDate(convertor
									.getDateTime4(installationDate));

						}

					}
				}
				emmsDataForm.setInductionDate(convertor.getDate2(emmsDataForm
						.getInductionDate()));
				emmsDataForm.setSignalOutDate(convertor.getDate2(emmsDataForm
						.getSignalOutDate()));

				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/meterDetails.jsp");
				
				
				
				package com.wipro.iaf.emms.controller;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.wipro.iaf.emms.constants.Constants;
import com.wipro.iaf.emms.form.AssetConfigForm;
import com.wipro.iaf.emms.form.EmmsDataForm;
import com.wipro.iaf.emms.form.PMDetailForm;
import com.wipro.iaf.emms.service.HalService;
import com.wipro.iaf.emms.validator.AssetConfigValidator;
import com.wipro.iaf.emms.validator.DateConvertor;
import com.wipro.iaf.emms.validator.ExcelValidator;

@Controller
@RequestMapping("/ASSET")
public class AssetController {

	@Autowired
	private FLBController flbController;

	@Autowired
	List<AssetConfigForm> assetFormList;

	@Autowired
	PMController pmController;

	@Autowired
	InstallableAssetController installAssetController;
	@Autowired
	HalService halService;

	@Autowired
	MeterController meterController;

	@Autowired
	private AssetConfigValidator assetValidator;

	@Autowired
	private ExcelValidator excelValidator;

	@Autowired
	private EmmsDataForm emmsDataForm;

	Map<String, String> parentChild;

	@RequestMapping(value = { "/saveAsset" }, method = RequestMethod.GET)
	public List<AssetConfigForm> fetchAssetDetails(String recordID,
			EmmsDataForm emmsDataForm) {
		this.emmsDataForm = emmsDataForm;
		emmsDataForm.setRecordId(recordID);
		emmsDataForm.setSelectedRecordId(recordID);
		System.out.println(emmsDataForm.getRecordId() + ":"
				+ emmsDataForm.getSelectedRecordId());
		System.out.println(this.emmsDataForm.getAssetConfigStatus() + ":"
				+ this.emmsDataForm.getInstallableStatus() + ":"
				+ emmsDataForm.isFreeze());
		assetFormList = halService.fetchConfigDetails(recordID);
		parentChild = halService.setParentChild();
		return assetFormList;
	}

	@RequestMapping(value = "/saveAsset", method = RequestMethod.POST)
	public String submit(
			@ModelAttribute("emmsDataForm") EmmsDataForm emmsDataForm,
			BindingResult bindingResult, ModelMap model,
			@RequestParam String action, @RequestParam String linkSelected) {
		System.out.println("action" + " " + action);
		System.out.println("linkSelected" + linkSelected);

		if (linkSelected.equals(Constants.LISTVIEW)) {
			System.out.println(Constants.LISTVIEW);
			List<EmmsDataForm> emmsDataFormList = halService
					.getEmmsDataOnView();
			model.addAttribute("emmsDataForm", this.emmsDataForm);
			model.addAttribute("emmsDataFormList", emmsDataFormList);
			model.addAttribute("pageVar", "/WEB-INF/jsp/ListViewEmmsData.jsp");
		} else {

			if (linkSelected.equals(Constants.ASSETCONFIG)) {
				System.out.println(Constants.ASSETCONFIG);
				emmsDataForm.setSelectedRecordId(emmsDataForm.getRecordId());
				if (null != emmsDataForm.getSelectedRecordId()
						&& !emmsDataForm.getSelectedRecordId().isEmpty()) {
					emmsDataForm = halService.fetchDetails(emmsDataForm
							.getSelectedRecordId());
					emmsDataForm.setAssetFormList(this.fetchAssetDetails(
							emmsDataForm.getSelectedRecordId(), emmsDataForm));
					System.out.println("emmsDataForm after"
							+ emmsDataForm.toString());
				}
				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/AssetConfig.jsp");

			} else if (linkSelected.equals(Constants.INSTALLABLEASSET)) {
				System.out.println(Constants.INSTALLABLEASSET);
				System.out.println(Constants.INSTALLABLEASSET);
				emmsDataForm.setSelectedRecordId(emmsDataForm.getRecordId());
				System.out.println(emmsDataForm.getSelectedRecordId() + ":"
						+ emmsDataForm.getRecordId());
				if (null != emmsDataForm.getSelectedRecordId()
						&& !emmsDataForm.getSelectedRecordId().isEmpty()) {
					emmsDataForm = halService.fetchDetails(emmsDataForm
							.getSelectedRecordId());
					emmsDataForm.setInstallableFormList(installAssetController
							.fetchInstallableDetails(
									emmsDataForm.getSelectedRecordId(),
									emmsDataForm));
					System.out.println("emmsDataForm after"
							+ emmsDataForm.toString());

				}
				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar",
						"/WEB-INF/jsp/InstallableAsset.jsp");

			} else if (linkSelected.equals(Constants.PM)) {
				emmsDataForm.setSelectedRecordId(emmsDataForm.getRecordId());
				System.out.println(Constants.PM);
				if (null != emmsDataForm.getSelectedRecordId()
						&& !emmsDataForm.getSelectedRecordId().isEmpty()) {
					emmsDataForm = halService.fetchDetails(emmsDataForm
							.getSelectedRecordId());
					emmsDataForm.setPmDetailFormList(pmController
							.fetchPMDetails(emmsDataForm.getSelectedRecordId(),
									emmsDataForm));
					System.out.println("emmsDataForm after"
							+ emmsDataForm.toString());

				}
				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/PMScreen.jsp");
			} else if (linkSelected.equals(Constants.METER)) {
				System.out.println(Constants.METER);
				emmsDataForm.setSelectedRecordId(emmsDataForm.getRecordId());
				if (null != emmsDataForm.getSelectedRecordId()
						&& !emmsDataForm.getSelectedRecordId().isEmpty()) {
					emmsDataForm = halService.fetchDetails(emmsDataForm
							.getSelectedRecordId());

					emmsDataForm.setMeterFormList(meterController
							.fetchMeterDetails(
									emmsDataForm.getSelectedRecordId(),
									emmsDataForm));
					System.out.println("emmsDataForm after"
							+ emmsDataForm.toString());
				}
				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/meterDetails.jsp");

			} else if (linkSelected.equals(Constants.FLB)) {

				emmsDataForm.setSelectedRecordId(emmsDataForm.getRecordId());
				System.out.println(Constants.FLB);
				if (null != emmsDataForm.getSelectedRecordId()
						&& !emmsDataForm.getSelectedRecordId().isEmpty()) {
					emmsDataForm = halService.fetchDetails(emmsDataForm
							.getSelectedRecordId());

					emmsDataForm
							.setFlbFormList(flbController
									.fetchFLBDetails(emmsDataForm
											.getSelectedRecordId()));
					System.out.println("emmsDataForm after"
							+ emmsDataForm.toString());
				}
				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/FLBScreen.jsp");

			} else if (action.equals("Validate")) {

				System.out.println("validate");
				System.out.println("emmsDataForm=" + emmsDataForm);
				System.out.println("this.emmsDataForm=" + this.emmsDataForm);

				DateConvertor convertor = new DateConvertor();
				int warning = 0;
				int flag = 0;
				int count = 0;
				int date = 0;
				String status = Constants.NOTVALIDATED;
				String time = new Time(System.currentTimeMillis()).toString();
				String inductionDate = "";
				String signalOutDate = "";
				if (0 < emmsDataForm.getSignalOutDate().length()
						&& 0 < emmsDataForm.getInductionDate().length()) {
					inductionDate = emmsDataForm.getInductionDate() + " "
							+ time;
					signalOutDate = emmsDataForm.getSignalOutDate() + " "
							+ time;
					emmsDataForm.setInductionDate(convertor
							.getDate(inductionDate));
					emmsDataForm.setSignalOutDate(convertor
							.getDate(signalOutDate));
				} else {
					date = 1;
					emmsDataForm.setInductionDate("");
					emmsDataForm.setSignalOutDate("");
					// assetConfigForm.setErrorDesc(Constants.NOTNULL);
				}

				emmsDataForm.setInstallableStatus(this.emmsDataForm
						.getInstallableStatus());
				System.out.println(this.emmsDataForm.getInstallableStatus()
						+ emmsDataForm.getAssetConfigStatus());
				List<String> pnsncombination = new ArrayList<String>();
				List<String> pninlieucombination = new ArrayList<String>();
				List<String> sninlieucombination = new ArrayList<String>();
				List<AssetConfigForm> configForm = emmsDataForm
						.getAssetFormList();
				Map<String, AssetConfigForm> lcnForm = new HashMap<String, AssetConfigForm>();
				parentChild = halService.getParentChild();
				System.out.println("PARENT CHILD:" + parentChild);

				if (null != configForm && configForm.size() > 0) {

					int i = 0;
					// emmsDataForm.setAssetConfigStatus("");
					for (AssetConfigForm assetConfigForm : configForm) {

						System.out.println("Status:"
								+ emmsDataForm.getAssetConfigStatus());
						assetConfigForm.setErrorDesc("");
						assetConfigForm.setInstalledPNList(assetFormList.get(i)
								.getInstalledPNList());
						assetConfigForm.setConditionCodes(assetFormList.get(i)
								.getConditionCodes());
						assetConfigForm.setRecordRowId(assetFormList.get(i)
								.getRecordRowId());

						String lcn = assetConfigForm.getLcn();
						String parent = parentChild.get(lcn);
						lcnForm.put(lcn, assetConfigForm);

						/*
						 * When validated without entering data in any row
						 */
						if (assetConfigForm.getInstalledPN().length() <= 0
								&& assetConfigForm.getConditionCode().length() <= 0
								&& assetConfigForm.getDateOfManfacturing()
										.length() <= 0
								&& assetConfigForm.getDateOfReciept().length() <= 0
								&& assetConfigForm.getInstalledSN().length() <= 0
								&& assetConfigForm.getInLieuPn().length() <= 0) {
							assetConfigForm.setErrorStatus(Constants.WARNING);
							emmsDataForm
									.setAssetConfigStatus(Constants.VALIDATIONCOMPLETEDWITHERRORS);
							if (emmsDataForm.getAssetConfigStatus().equals(
									Constants.VALIDATIONCOMPLETED)
									&& this.emmsDataForm
											.getInstallableStatus()
											.equals(Constants.VALIDATIONCOMPLETED)) {

								System.out.println("inside record status:");
								emmsDataForm
										.setRecordStatus(Constants.VALIDATIONCOMPLETED);
							} else {
								emmsDataForm
										.setRecordStatus(Constants.VALIDATIONCOMPLETEDWITHERRORS);
							}

							warning = 1;

							if (assetConfigForm.getDateOfManfacturing()
									.length() > 0
									&& emmsDataForm.getSignalOutDate().length() > 0
									&& emmsDataForm.getInductionDate().length() > 0) {
								halService
										.update(emmsDataForm, assetConfigForm);
							} else {
								assetConfigForm.setErrorDesc(Constants.NOTNULL);
							}

						} else {
							/*
							 * if there is any data in any row
							 */
							System.out.println("Current LCN=" + lcn);
							System.out.println("LCNFORM=" + lcnForm);
							System.out.println("Parent=" + parent);
							i++;
							String receiptDate = "";
							String manufacturingDate = assetConfigForm
									.getDateOfManfacturing() + " " + time;

							if (assetConfigForm.getDateOfReciept().length() > 0) {
								receiptDate = assetConfigForm
										.getDateOfReciept() + " " + time;
							}

							assetConfigForm
									.setDateOfManfacturing(manufacturingDate);
							assetConfigForm.setDateOfReciept(receiptDate);

							String validate = assetValidator
									.assetConfigValidate(inductionDate,
											signalOutDate,
											assetConfigForm.getInstalledPN(),
											assetConfigForm.getInLieuPn(),
											assetConfigForm.getInstalledSN(),
											assetConfigForm.getConditionCode(),
											manufacturingDate, receiptDate,
											pnsncombination,
											pninlieucombination,
											sninlieucombination, lcnForm,
											parent);

							String pnsn = assetConfigForm.getInstalledPN()
									+ ":" + assetConfigForm.getInstalledSN();
							String pninlieu = assetConfigForm.getInstalledPN()
									+ ":" + assetConfigForm.getInLieuPn();
							String sninlieu = assetConfigForm.getInstalledSN()
									+ ":" + assetConfigForm.getInLieuPn();
							pnsncombination.add(pnsn);
							pninlieucombination.add(pninlieu);
							sninlieucombination.add(sninlieu);
							/*
							 * Checking after validations
							 */
							if (validate == "") {
								// ALL COLUMNS HAVE CORRECT DATA
								if (!(assetConfigForm.getInstalledPNList()
										.containsValue(assetConfigForm
												.getInLieuPn()))) {
									// WARNING IN LIEU
									System.out.println("INSIDE WARNING");
									status = Constants.VALIDATEDWITHWARNING;
									assetConfigForm.setErrorStatus(status);
									assetConfigForm
											.setErrorDesc(Constants.WARNINGMESSAGE);
								} else {
									// NO WARNING ALL CORRECT
									System.out.println("INSIDE VALIDATED");
									status = Constants.VALIDATED;
									assetConfigForm.setErrorStatus(status);
								}
								System.out.println(getClass()
										+ ":Error Status:"
										+ assetConfigForm.getErrorStatus());

							} else {
								// ANY COLUMNS DOES NOT HAVE CORRECT DATA
								System.out.println("INSIDE NOT VALIDATED");
								flag = 1;
								status = Constants.NOTVALIDATED;
								assetConfigForm.setErrorDesc(validate);
								assetConfigForm.setErrorStatus(status);
							}
							// SETTING CURRENT SCREEN STATUS
							if (flag == 1) {
								System.out.println("Flag=1;Errors");
								emmsDataForm
										.setAssetConfigStatus(Constants.VALIDATIONCOMPLETEDWITHERRORS);
								flag = 0;
								count = count + 1;

							} else {

								if (count <= 0 && warning <= 0) {
									System.out.println("NOERROR");
									emmsDataForm
											.setAssetConfigStatus(Constants.VALIDATIONCOMPLETED);
								}

							}
							System.out
									.println(emmsDataForm
											.getAssetConfigStatus()
											+ ":"
											+ this.emmsDataForm
													.getInstallableStatus()
											+ ":"
											+ emmsDataForm
													.getInstallableStatus());

							// SETTING MULTIPLE SCREEN COMBINED STATUS
							if (Constants.VALIDATIONCOMPLETED
									.equals(emmsDataForm.getAssetConfigStatus())
									&& Constants.VALIDATIONCOMPLETED
											.equals(this.emmsDataForm
													.getInstallableStatus())) {

								System.out.println("inside record status:");
								emmsDataForm
										.setRecordStatus(Constants.VALIDATIONCOMPLETED);
							} else {
								emmsDataForm
										.setRecordStatus(Constants.VALIDATIONCOMPLETEDWITHERRORS);
							}

							assetConfigForm.setDateOfManfacturing(convertor
									.getDateTime(assetConfigForm
											.getDateOfManfacturing()));
							assetConfigForm.setDateOfReciept(convertor
									.getDateTime(assetConfigForm
											.getDateOfReciept()));
							System.out.println(emmsDataForm.getSignalOutDate()
									.length());

							// UPDATE ONLY IF DATE HAS VALUE
							if (assetConfigForm.getDateOfManfacturing()
									.length() > 0
									&& emmsDataForm.getSignalOutDate().length() > 0
									&& emmsDataForm.getInductionDate().length() > 0) {
								halService
										.update(emmsDataForm, assetConfigForm);

							} else {
								assetConfigForm.setErrorDesc(Constants.NOTNULL);
							}
							assetConfigForm.setDateOfManfacturing(convertor
									.getDateTime4(manufacturingDate));
							assetConfigForm.setDateOfReciept(convertor
									.getDateTime4(receiptDate));
						}

					}
				}
				emmsDataForm.setInductionDate(convertor.getDate2(emmsDataForm
						.getInductionDate()));
				emmsDataForm.setSignalOutDate(convertor.getDate2(emmsDataForm
						.getSignalOutDate()));

				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/AssetConfig.jsp");
			} else if (action.equals("Save")) {

				DateConvertor convertor = new DateConvertor();
				String inductionDate = "";
				String signalOutDate = "";
				if (emmsDataForm.getSignalOutDate().length() > 0
						&& emmsDataForm.getInductionDate().length() > 0) {
					inductionDate = emmsDataForm.getInductionDate();
					signalOutDate = emmsDataForm.getSignalOutDate();
					emmsDataForm.setInductionDate(convertor
							.getDate(inductionDate));
					emmsDataForm.setSignalOutDate(convertor
							.getDate(signalOutDate));
				} else {

					emmsDataForm.setInductionDate("");
					emmsDataForm.setSignalOutDate("");
					// assetConfigForm.setErrorDesc(Constants.NOTNULL);
				}

				List<AssetConfigForm> configForm = emmsDataForm
						.getAssetFormList();
				if (null != configForm && configForm.size() > 0) {
					System.out.println(configForm);
					int i = 0;
					emmsDataForm.setAssetConfigStatus("");
					emmsDataForm.setRecordStatus("");
					for (AssetConfigForm assetConfigForm : configForm) {
						assetConfigForm.setInstalledPNList(assetFormList.get(i)
								.getInstalledPNList());
						assetConfigForm.setConditionCodes(assetFormList.get(i)
								.getConditionCodes());
						assetConfigForm.setRecordRowId(assetFormList.get(i)
								.getRecordRowId());
						i++;
						String mfgDate = assetConfigForm
								.getDateOfManfacturing();
						String receiptDate = assetConfigForm.getDateOfReciept();

						assetConfigForm.setDateOfManfacturing(convertor
								.getDateTime3(mfgDate));
						assetConfigForm.setDateOfReciept(convertor
								.getDateTime3(receiptDate));

						if (assetConfigForm.getDateOfManfacturing().length() > 0
								&& emmsDataForm.getSignalOutDate().length() > 0
								&& emmsDataForm.getInductionDate().length() > 0) {
							System.out.println(halService.update(emmsDataForm,
									assetConfigForm));

						} else {
							assetConfigForm.setErrorDesc(Constants.NOTNULL);
						}
						assetConfigForm.setDateOfManfacturing(mfgDate);
						assetConfigForm.setDateOfReciept(receiptDate);

					}
				}

				emmsDataForm.setInductionDate(inductionDate);
				emmsDataForm.setSignalOutDate(signalOutDate);
				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/AssetConfig.jsp");
			} else if (action.equals("Yes")) {
				System.out.println("inside Yes");
				emmsDataForm.setFreeze(true);
				System.out.println(emmsDataForm.getRecordId() + ":"
						+ emmsDataForm.isFreeze());
				/*
				 * halService.updateFreeze(emmsDataForm.isFreeze(),
				 * emmsDataForm.getRecordId());
				 */
				List<AssetConfigForm> configForm = emmsDataForm
						.getAssetFormList();
				if (null != configForm && configForm.size() > 0) {

					for (AssetConfigForm assetConfigForm : configForm) {

						System.out.println(assetConfigForm.getInstalledPN());
						if (!assetConfigForm.getInstalledPN().isEmpty())
							halService.updateMeter(assetConfigForm);
					}

				}
				//

				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/homePage.jsp");
			} else if (action.equals("Export")) {

				System.out.println("INSIDE EXPORT");

				String filename = "C:\\DATA.xlsx";
				XSSFWorkbook workbook = new XSSFWorkbook();
				XSSFSheet sheet = workbook.createSheet("ABCD");
				XSSFRow head = sheet.createRow((short) 0);
				head.createCell(0).setCellValue("Indicator");
				head.createCell(1).setCellValue("LCN");
				head.createCell(2).setCellValue("Position");
				head.createCell(3).setCellValue("Build Item");
				head.createCell(4).setCellValue("Assetnum");
				head.createCell(5).setCellValue("P/N");
				head.createCell(6).setCellValue("Part Description");
				head.createCell(7).setCellValue("S/N");
				head.createCell(8).setCellValue("Installed P/N");
				head.createCell(9).setCellValue("In-Lieu P/N");
				head.createCell(10).setCellValue("Installed S/N");
				head.createCell(11).setCellValue("Condition Code");
				head.createCell(12).setCellValue("Date of Manufacturing");
				head.createCell(13).setCellValue("Date of Receipt");
				head.createCell(14).setCellValue("Error Status");
				head.createCell(15).setCellValue("Error Description");

				XSSFRow row = null;

				int rowIndex = 1;

				List<AssetConfigForm> configForm = emmsDataForm
						.getAssetFormList();
				if (null != configForm && configForm.size() > 0) {

					for (AssetConfigForm assetConfigForm : configForm) {
						System.out.println("count=" + rowIndex);
						row = sheet.createRow((short) rowIndex);

						row.createCell(0).setCellValue(
								assetConfigForm.getIndicator());
						row.createCell(1)
								.setCellValue(assetConfigForm.getLcn());
						row.createCell(2).setCellValue(
								assetConfigForm.getPosition());
						row.createCell(3).setCellValue(
								assetConfigForm.getBuildItem());
						row.createCell(4).setCellValue(
								assetConfigForm.getAssetNum());
						row.createCell(5).setCellValue(
								assetConfigForm.getPartNum());
						row.createCell(6).setCellValue(
								assetConfigForm.getPartDescription());
						row.createCell(7).setCellValue(
								assetConfigForm.getSerialNum());
						row.createCell(8).setCellValue(
								assetConfigForm.getInstalledPN());
						row.createCell(9).setCellValue(
								assetConfigForm.getInLieuPn());
						row.createCell(10).setCellValue(
								assetConfigForm.getInstalledSN());
						row.createCell(11).setCellValue(
								assetConfigForm.getConditionCode());
						row.createCell(12).setCellValue(
								assetConfigForm.getDateOfManfacturing());
						row.createCell(13).setCellValue(
								assetConfigForm.getDateOfReciept());
						row.createCell(14).setCellValue(
								assetConfigForm.getErrorStatus());
						row.createCell(15).setCellValue(
								assetConfigForm.getErrorDesc());

						rowIndex++;
					}

				}
				FileOutputStream fout;
				try {
					fout = new FileOutputStream(filename);
					workbook.write(fout);
					fout.close();

				} catch (Exception e) {

					e.printStackTrace();
				}

				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/homePage.jsp");

			} else if (action.equals("Import")) {

				String s = emmsDataForm.getAssetExcelfile()
						.getOriginalFilename();

				List<AssetConfigForm> oldConfigList = emmsDataForm
						.getAssetFormList();
				List<AssetConfigForm> configList = new ArrayList<AssetConfigForm>();

				XSSFWorkbook workbook = null;
				try {
					workbook = new XSSFWorkbook(emmsDataForm
							.getAssetExcelfile().getInputStream());
				} catch (IOException e) {

				}

				XSSFSheet worksheet = workbook.getSheetAt(0);
				boolean headerStatus = assetValidator.validateHeader(worksheet
						.getRow(0));
				boolean countRows = oldConfigList.size() == worksheet
						.getLastRowNum();
				System.out.println(headerStatus + ":" + countRows);
				if (headerStatus && countRows) {

					for (int j = 1; j <= worksheet.getLastRowNum(); j++) {
						AssetConfigForm configForm = new AssetConfigForm();
						XSSFRow row = worksheet.getRow(j);

						assetValidator.checkCellType2003(row.getCell(0));

						if (row.getCell(0) != null) {
							String indicator = assetValidator
									.checkCellType2003(row.getCell(0));
							configForm.setIndicator(indicator);
						}
						if (row.getCell(1) != null) {
							String lcn = assetValidator.checkCellType2003(row
									.getCell(1));

							configForm.setLcn(lcn);
						}
						if (row.getCell(2) != null) {
							String position = assetValidator
									.checkCellType2003(row.getCell(2));

							configForm.setPosition(position);
						}
						if (row.getCell(3) != null)

						{
							String buildItem = assetValidator
									.checkCellType2003(row.getCell(3));
							configForm.setBuildItem(buildItem);
						}
						if (row.getCell(4) != null) {
							String assetNum = assetValidator
									.checkCellType2003(row.getCell(4));
							configForm.setAssetNum(assetNum);
						}
						if (row.getCell(5) != null) {
							String partNum = assetValidator
									.checkCellType2003(row.getCell(5));
							configForm.setPartNum(partNum);
						}
						if (row.getCell(6) != null) {
							String partDescription = assetValidator
									.checkCellType2003(row.getCell(6));
							configForm.setPartDescription(partDescription);
						}
						if (row.getCell(7) != null) {
							String serialNum = assetValidator
									.checkCellType2003(row.getCell(7));
							configForm.setSerialNum(serialNum);
						}
						if (row.getCell(8) != null) {
							String installedPN = assetValidator
									.checkCellType2003(row.getCell(8));
							configForm.setInstalledPN(installedPN);
						}
						if (row.getCell(9) != null) {
							String inLieuPn = assetValidator
									.checkCellType2003(row.getCell(9));
							configForm.setInLieuPn(inLieuPn);
						}
						if (row.getCell(10) != null) {
							String installedSN = assetValidator
									.checkCellType2003(row.getCell(10));
							configForm.setInstalledSN(installedSN);
						}
						if (row.getCell(11) != null) {
							String conditionCode = assetValidator
									.checkCellType2003(row.getCell(11));
							configForm.setConditionCode(conditionCode);
						}
						if (row.getCell(12) != null) {
							String dateOfManfacturing = assetValidator
									.checkCellType2003(row.getCell(12));
							configForm
									.setDateOfManfacturing(dateOfManfacturing);
						}
						if (row.getCell(13) != null) {
							String dateOfReciept = assetValidator
									.checkCellType2003(row.getCell(13));
							configForm.setDateOfReciept(dateOfReciept);
						}
						if (row.getCell(14) != null) {
							String errorStatus = assetValidator
									.checkCellType2003(row.getCell(14));
							configForm.setErrorStatus(errorStatus);
						}
						if (row.getCell(15) != null) {
							String errorDesc = assetValidator
									.checkCellType2003(row.getCell(15));
							configForm.setErrorDesc(errorDesc);
						}
						configList.add(configForm);
						System.out.println(configForm.toString());

					}
					emmsDataForm.setAssetFormList(configList);
					//System.out.println(configList.toString());
				} else

				{
					emmsDataForm.setBulkImportStatus("Error");
				}

				model.addAttribute("emmsDataForm", emmsDataForm);
				model.addAttribute("pageVar", "/WEB-INF/jsp/AssetConfig.jsp");

			}
		}
		return "basic";
	}
}
				